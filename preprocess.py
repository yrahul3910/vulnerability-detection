import json
import os
import pandas as pd
from pathlib import Path


def split_fn(name: str):
    """
    Returns a split function that separates the data
    by the project.

    :param {str} name - The project name.
    :return {func} A split function
    """
    def _split_by_name(data):
        return [{'func': x['func'], 'target': x['target']}
                for x in data if x['project'].lower() == name.lower()]

    return _split_by_name


def write_fn(dataset: list, base_path: Path, name: str):
    """
    Writes C++ files from a dataset to a directory with name `name`.

    :param {list} dataset - The dataset
    :param {Path} base_path - The base path
    :param {str} name - The directory name
    """
    if not (base_path / name).exists():
        (base_path / name).mkdir()

    data = []
    for i, obj in enumerate(dataset):
        with open(base_path / f'{name}/{i}.cpp', 'w') as f:
            f.write(obj['func'])

        data.append((f'{i}.cpp', obj['target']))

    df = pd.DataFrame(data, columns=['file', 'target'])
    df.to_csv(base_path / f'{name}/labels.csv')


if __name__ == '__main__':
    # Read the data
    with open('data/raw/dataset.json', 'r') as f:
        data = json.load(f)

    qemu = split_fn('qemu')(data)
    ffmpeg = split_fn('ffmpeg')(data)

    # Write C++ files
    base_path = Path('./data/')
    processed_path_base = base_path / 'processed'

    if not processed_path_base.exists():
        processed_path_base.mkdir()

    write_fn(qemu, processed_path_base, 'qemu')
    write_fn(ffmpeg, processed_path_base, 'ffmpeg')
