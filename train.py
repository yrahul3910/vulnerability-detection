import pickle
import numpy as np
import sys
from sklearn.model_selection import train_test_split
from raise_utils.transform import Transform
from raise_utils.data import Data
from raise_utils.learners import FeedforwardDL, Autoencoder


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: train.py DATASET')
        sys.exit(1)

    dataset = sys.argv[1]
    with open(f'./data/final/{dataset}.pickle', 'rb') as f:
        data = pickle.load(f)

    X = data['X']
    y = data['y'].ravel()

    data = Data(*train_test_split(X, y))

    # Ultrasampling
    transform = Transform('wfo')
    transform.apply(data)

    data.y_train = 1. - data.y_train
    data.y_test = 1. - data.y_test

    # Autoencode the inputs
    loss = 1e4
    while loss > 1e2:
        ae = Autoencoder(n_layers=3, n_units=[128, 64, 32], n_out=16)
        ae.set_data(*data)
        ae.fit()

        loss = ae.model.history.history['loss'][-1]

    data.x_train = ae.encode(np.array(data.x_train))
    data.x_test = ae.encode(np.array(data.x_test))

    # Tune the hyper-params
    dodge_config = {
        'n_runs': 10,
        'data': [data],
        'metrics': ['f1', 'd2h', 'pd', 'pf', 'prec'],
        'learners': [],
        'log_path': './log/',
        'transforms': ['standardize', 'normalize', 'minmax'] * 30,
        'random': True,
        'name': dataset
    }

    for _ in range(30):
        dodge_config['learners'].append(
            FeedforwardDL(weighted=True, wfo=True, smote=True,
                          random={'n_units': (
                              2, 6), 'n_layers': (2, 5)},
                          n_epochs=50)
        )

    dodge = DODGE(dodge_config)
    dodge.optimize()
